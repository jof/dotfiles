#!/usr/bin/env ruby

require 'getoptlong'
require 'yaml'

def usage
  puts "Usage: #{File.basename(__FILE__)} [ [--database_file | -f] yaml_database | [--translate | -t] oui_db_to_translate | xxxxxx ]"
  puts "  If -t is specified, it'll convert the database file provided into a YAML hash."
  puts "  If -f is specified, it'll read the specified YAML file instead of the default."
  puts "  In normal, option-less mode \"xxxxxx\" is the three-byte OUI ID in hex"
end

def translate_file(file)
  regex = /^(([A-F0-9]{2}-){2}[A-Z0-9]{2})\s+\(hex\)\s+(.*$)/
  lines = open(file).select { |line| line.match(regex) }
  hash = {}
  lines.each do |line|
    parts = line.split
    hash[parts[0]] = parts[2..parts.length-1].join(' ')
  end
  
  return YAML.dump(hash)
end

def find_name(file, oui)
  database = YAML.load_file(file)
  return database[oui]
end

# Take a string of chars and pad any leading zeros (per octet, if there are
# any) and return a string like "00-11-AF"
def normalize_oui(oui)
  case oui
  when /^$/i
  end

  oui = oui.split(/-|:|\./)

  oui = oui.delete('-:.')
  if oui.length < 6 then
    oui = oui.rjust(6, '0')
  end
  parts = oui.split('')
  o1, o2, o3 = parts[0,2], parts[2,2], parts[4,2]
  oui = "#{o1}-#{o2}-#{o3}"
  oui = oui.upcase
  return oui
end

def normalize_mac(mac)
  case mac
  when /^([0-9A-F]{4}\.){2}[0-9A-F]{4}$/i    # 0000.1111.2222
    return normalize_oui(mac.delete('.')[0,6])
  when /^([0-9A-F]{2}:){5}[0-9A-F]{2}$/i     # 00:11:22:33:44:55
    return normalize_oui(mac[0,8])
  when /^([0-9A-F]{1,2}:){5}[0-9A-F]{1,2}$/i # 0:1:22:33:44:55
    return normalize_oui(mac.split(':')[0,3].join(':'))
  when /^([0-9A-F]{2}-){5}[0-9A-F]{2}$/i     # 00-11-22-33-44-55
    return normalize_oui(mac.split('-')[0,3].join('-'))
  when /^[0-9A-F]{12}$/i                     # 001122334455
    return normalize_oui(mac[0,6])
  end
end

def normalize_oui_or_mac(string)
  case string.delete("-.: \t").length
  when (3..6)
    return normalize_oui(string)
  when (7..17)
    return normalize_mac(string)
  end
end


database_file = nil
file_to_translate = nil
DEFAULT_DATABASE = File.join(ENV['HOME'], 'lib', 'ieee_oui.yaml')
opts = GetoptLong.new( [ '--database_file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
                       [ '--translate', '-t', GetoptLong::REQUIRED_ARGUMENT ] )
opts.each do |opt,arg|
  case opt
  when '--database_file'
    database_file = arg
  when '--translate'
    file_to_translate = arg
  end
end

oui = ARGV.first
oui = normalize_oui_or_mac(oui) if oui

if database_file && file_to_translate then
  usage
  Kernel.exit(1)
elsif file_to_translate then
  print translate_file(file_to_translate)
elsif oui
  if database_file then
    puts find_name(database_file, oui)
  elsif 
    puts find_name(DEFAULT_DATABASE, oui)
  end
else
  usage
  Kernel.exit(1)
end
